What happens when you initialize a repository? Why do you need to do it?

Git creates a folder called .Git where the metadata is going to be stored, also the folder is going to be shown only if ls -a  is used, at the beginning has 0 commits. We need to init the repository to start keeping track of the files on the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is a temporary area we add the files that have been modified and we want to be commited, we add those files according with the logical changes, then it will be added to the repository when we do the next commit
It is helpful to control what goes to the stage area and then to the repository.

How can you use the staging area to make sure you have one commit per logical change?

Just add the files that were changed to the Staging Area every time there is a logical change, then do the commit on the repository

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to have different versions of the programs, for example if you are working with a new version or a diffeent language, you want to have your new versions separated from the master ( production) and work easily on the new versions. They will keep the versions separated and using labels, we can switch between versions using checkout (*)

How do the diagrams help you visualize the branch structure?
It gives me an idea of the structure of the files, what different versions we have, who is working on different places, the history of the commits, and if there is any commits than doesnt belong to the master or a branch. It is not clear to me how a commit is not part of a branch or a master? how did that happen?

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merge create a unique path for the Master or (the target branch), the commits are grouped and organized by date, after we can erase the branch label that was merged to the Master or Target. We need to make sure we have active the branch where we want to merge the files. The commits from one branch are not going to match with the commits from the other branch ( parent and son) then we can shoud use git show to see the diffefences with the previous commit. We represent it in that way because the commits have a logic sequence and the graph explains that easily.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: You can easily join two different parts of a program in only one part that contains both, Cons: When there is duplicate code, Git detects the conflict and the programmer needs to check both version and decides what version will stay.
